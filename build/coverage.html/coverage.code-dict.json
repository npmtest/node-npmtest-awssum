{"/home/travis/build/npmtest/node-npmtest-awssum/test.js":"/* istanbul instrument in package npmtest_awssum */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-awssum/lib.npmtest_awssum.js":"/* istanbul instrument in package npmtest_awssum */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_awssum = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_awssum = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-awssum/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-awssum && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_awssum */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_awssum\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_awssum.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_awssum.rollup.js'] =\n            local.assetsDict['/assets.npmtest_awssum.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_awssum.__dirname +\n                    '/lib.npmtest_awssum.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-awssum/node_modules/awssum/awssum.js":"// --------------------------------------------------------------------------------------------------------------------\n//\n// awssum.js - the base class for all web services in node-awssum\n//\n// Copyright (c) 2011 AppsAttic Ltd - http://www.appsattic.com/\n// Written by Andrew Chilton <chilts@appsattic.com>\n//\n// License: http://opensource.org/licenses/MIT\n//\n// --------------------------------------------------------------------------------------------------------------------\n\n// built-ins\nvar querystring = require('querystring');\nvar http = require('http');\nvar https = require('https');\n\n// dependencies\nvar _ = require('underscore');\nvar xml2js = require('xml2js');\n\n// our own\nvar esc = require('./lib/esc.js');\n\n// load up package.json so that we can get the version string for the 'User-Agent'\nvar userAgent = 'awssum/' + require('./package.json').version;\n\n// --------------------------------------------------------------------------------------------------------------------\n// constants\n\nvar MARK = 'awssum: ';\n\nvar parser = new xml2js.Parser({\n    attrkey : '@',\n    valuekey : '#',\n    normalize : false,\n    trim : false,\n    explicitRoot : true,\n    explicitArray : false\n});\n\nvar debug = false;\n\nvar noop = function(){};\n\n// --------------------------------------------------------------------------------------------------------------------\n// utility functions\n\nfunction load(path) {\n    // since NodeJS caches requires, we won't cache them here\n    return require('./' + path);\n}\n\nfunction addParam(params, name, value) {\n    params.push({ 'name' : name, 'value' : value });\n}\n\nfunction addParamIfDefined(params, name, value) {\n    if ( ! _.isUndefined(value) ) {\n        params.push({ 'name' : name, 'value' : value });\n    }\n}\n\n// Takes an array and adds params with names like:\n//\n// * Name.0, Name.1, Name.2, Name.3, ...\n//\n// or if you specify 'extra', the names will be:\n//\n// * Name.Extra.0, Name.Extra.1, Name.Extra.2, ...\nfunction addParamArray(params, name, value, prefix) {\n    value = value || [];\n\n    prefix = '' + name + '.' + (prefix ? prefix + '.' : '');\n\n    // if it's a string, just add this single value\n    if ( typeof value === 'string' ) {\n        params.push({ 'name' : prefix + '1', 'value' : value });\n        return;\n    }\n\n    // else it's an array, so add them all\n    for ( var i = 0; i < value.length; i++ ) {\n        params.push({ 'name' : prefix + (i+1), 'value' : value[i] });\n    }\n}\n\n// Takes an array and adds params with names like (for three calls of 'Id', 'Name', 'Zone'):\n//\n// * SetName.1.Id,   SetName.2.Id,   SetName.3.Id,   ...\n// * SetName.1.Name, SetName.2.Name, SetName.3.Name, ...\n// * SetName.1.Zone, SetName.2.Zone, SetName.3.Zone, ...\nfunction addParamArraySet(params, setName, name, value, prefix) {\n    value = value || [];\n\n    // if it's a string, just add this single value\n    if ( typeof value === 'string' ) {\n        params.push({ 'name' : setName + '.1.' + name, 'value' : value });\n        return;\n    }\n\n    // else it's an array, so add them all\n    _.each(value, function(v, i) {\n        if ( _.isUndefined(v) ) {\n            return;\n        }\n        params.push({ 'name' : setName + '.' + (i+1) + '.' + name, 'value' : v });\n    });\n}\n\n// Takes an array of arrays and adds params with names like:\n//\n// * SetName.<i>.Name.<j>\n// * Item.<i>.Attribute.<j>\n// * Filter.<i>.Value.<j> (e.g. Amazon:EC2:DescribeInstances)\nfunction addParam2dArray(params, setName, name, value) {\n    value = value || [];\n\n    if ( typeof value === 'undefined' ) {\n        // nothing to do\n        return;\n    }\n\n    // if it's a string, just add this single value\n    if ( typeof value === 'string' ) {\n        params.push({ 'name' : setName + '.1.' + name + '.1', 'value' : value });\n        return;\n    }\n\n    // else it's an array, so add them all\n    _.each(value, function(set, i) {\n        if ( _.isUndefined(set) ) {\n            return;\n        }\n\n        _.each(set, function(v, j) {\n            params.push({ 'name' : setName + '.' + (i+1) + '.' + name + '.' + (j+1), 'value' : v });\n        });\n    });\n}\n\n// Takes an array of arrays and adds params with names like:\n//\n// * SetName.X.SubSetName.Y.Id\n// * Item.X.Attribute.Y.Id\n// * Item.X.Attribute.Y.Id\nfunction addParam2dArraySet(params, setName, subsetName, name, value) {\n    value = value || [];\n\n    // if it's a string, just add this single value\n    if ( typeof value === 'string' ) {\n        params.push({ 'name' : setName + '.1.' + subsetName + '.1.' + name, 'value' : value });\n        return;\n    }\n\n    // else it's an array, so add them all\n    _.each(value, function(set, i) {\n        if ( _.isUndefined(set) ) {\n            return;\n        }\n\n        _.each(set, function(v, j) {\n            params.push({ 'name' : setName + '.' + (i+1) + '.' + subsetName + '.' + (j+1) + '.' + name, 'value' : v });\n        });\n    });\n}\n\n// Takes an array of objects and adds params with names like:\n//\n// * Item.X.Key1\n// * Item.X.Key2\n// * Item.Y.Key1\n// * Item.Y.Key2\n//\n// or\n//\n// * Item.prefix.X.Key1\n// * Item.prefix.X.Key2\n// * Item.prefix.Y.Key1\n// * Item.prefix.Y.Key2\nfunction addParamArrayOfObjects(params, name, array, prefix) {\n    prefix = prefix ? '.' + prefix : '';\n\n    // loop through all the array elements\n    _.each(array, function(obj, i) {\n        if ( _.isUndefined(obj) ) {\n            return;\n        }\n\n        // loop through all the keys in this object\n        _.each(obj, function(value, key) {\n            params.push({ 'name' : name + prefix + '.' + (i+1) + '.' + key, 'value' : '' + value });\n        });\n    });\n}\n\n// Takes an array of objects and adds params with names like:\n//\n// * Item.prefix.1.Key1.Something\n// * Item.prefix.1.Key2.Else\n// * Item.prefix.2.Key1.Whatever.Is.Here\n// * Item.prefix.2.Key1.prefix.1.Name\n// * Item.prefix.2.Key1.prefix.1.Value\n// * Item.prefix.2.Key2.prefix.2.Whatever\n// * Item.prefix.2.Key2.prefix.2.Whatever\nfunction addParamData(params, name, data, prefix) {\n    var member = prefix ? '.' + prefix : '';\n\n    if ( _.isString(data) || _.isNumber(data) || _.isBoolean(data) ) {\n        params.push({ 'name' : name, 'value' : '' + data });\n        return;\n    }\n\n    if ( _.isArray(data) ) {\n        // console.log('array=', data);\n        _.each(data, function(value, i) {\n            // should be another data structure, so recurse down it\n            addParamData(params, name + member + '.' + (i+1), value, prefix);\n        });\n        return;\n    }\n\n    if ( _.isObject(data) ) {\n        // console.log('object=', data);\n        _.each(data, function(value, key) {\n            // should be another data structure, so recurse down it\n            addParamData(params, name + '.' + key, value, prefix);\n        });\n        return;\n    }\n}\n\nfunction addParamJson(field, name, value) {\n    if ( ! _.isUndefined(value) ) {\n        field.push({ 'name' : name, 'value' : JSON.stringify(value) });\n    }\n}\n\nfunction addFormIfDefined(field, name, value) {\n    if ( ! _.isUndefined(value) ) {\n        field.push({ 'name' : name, 'value' : value });\n    }\n}\n\nfunction addJsonIfDefined(json, name, value) {\n    if ( ! _.isUndefined(value) ) {\n        json[name] = value;\n    }\n}\n\nfunction setHeader(header, name, value) {\n    header[name] = value;\n}\n\nfunction setHeaderIfDefined(header, name, value) {\n    if ( ! _.isUndefined(value) ) {\n        header[name] = value;\n    }\n}\n\n// do our own stringify query, since querystring.stringify doesn't do what we want (for AWS and others)\nfunction stringifyQuery(params) {\n    // console.log('Params :', params);\n    var query = _(params)\n        .chain()\n        .map(function(v, i) {\n            return _.isUndefined(v.value) ?\n                esc(v.name)\n                : esc(v.name) + '=' + esc(v.value)\n                ;\n        })\n        .join('&')\n        .value()\n    ;\n    // console.log('Query :', query);\n    return query;\n};\n\n// --------------------------------------------------------------------------------------------------------------------\n// AwsSum and functions to be overriden by inheriting class\n\n// function protocol()             -> string (the default protocol for the HTTP request, https or http)\n// function method()               -> string (the default method for the HTTP request)\n// function host()                 -> string (the host for this service/region)\n// function path()                 -> string (the default path for this service)\n// function addExtras()            -> side effect, adds extra whatever\n// function addCommonOptions(options, args) -> side effect, adds the common headers/params for this service\n// function statusCode()           -> the expected status code\n// function extractHeaders()       -> how to extract the headers from the response\n// function extractBody()          -> how to extract the body from the response\n// function extractBodyWhenError() -> how to extract the body from an error response\n\n// constructor\n\nvar AwsSum = function(opts) {\n    var self = this;\n    opts = opts || {};\n\n    // if we have been given an agent, store it for use\n    if ( typeof opts.agent !== 'undefined' ) {\n        self._agent = opts.agent;\n    }\n\n    // if we have been given a protocol, use that one\n    if ( opts.protocol ) {\n        self._protocol = opts.protocol;\n    }\n\n    return self;\n};\n\nAwsSum.prototype.agent = function() {\n    return this._agent;\n};\n\nAwsSum.prototype.protocol = function() {\n    if ( this._protocol ) {\n        return this._protocol;\n    }\n    return 'https';\n};\n\nAwsSum.prototype.method = function() {\n    return 'GET';\n};\n\n// AwsSum.prototype.host // no default\n\nAwsSum.prototype.path = function() {\n    return '/';\n};\n\nAwsSum.prototype.addExtras = function() { };\n\nAwsSum.prototype.addCommonOptions = function(options, args) { };\n\nAwsSum.prototype.statusCode = function(options) {\n    return 200;\n};\n\nAwsSum.prototype.extractBody = function(options) {\n    return 'none';\n};\n\nAwsSum.prototype.extractBodyWhenError = function(options) {\n    // set default to be undefined, so it'll be defaulted to the extractBody value in the response processing\n    return undefined;\n};\n\nAwsSum.prototype.extractHeaders = function() {\n    // default to extracting _all_ of the headers\n    return true;\n};\n\n// --------------------------------------------------------------------------------------------------------------------\n// utility methods\n\n// curry the send function for this operation\nfunction makeOperation(operation) {\n    return function(args, opts, callback) {\n        var self = this;\n\n        if ( arguments.length === 0 ) {\n            // defined as fn()\n            args = {};\n            opts = {};\n            callback = noop;\n        }\n        else if ( arguments.length === 1 ) {\n            // defined as fn(callback)\n            callback = args;\n            args = {};\n            opts = {};\n        }\n        else if ( arguments.length === 2 ) {\n            // defined as fn(args, callback)\n            callback = opts;\n            opts = {};\n        }\n        else if ( arguments.length === 3 ) {\n            // do nothing, we have everything, defined as fn(args, opts, callback)\n        }\n\n        self.send(operation, args, opts, callback);\n    };\n}\n\nfunction decodeWwwFormUrlEncoded(body) {\n    var form = {};\n    // turn the buffer into a string before splitting\n    body.toString('utf8').split('&').forEach(function(v, i) {\n        var keyValueArray = v.split('=');\n        form[keyValueArray[0]] = unescape(keyValueArray[1]);\n    });\n    return form;\n}\n\nfunction isStatusCodeOk(statusCode, received) {\n    if ( _.isObject(statusCode) && statusCode[received] ) {\n        return true;\n    }\n\n    if ( statusCode === received ) {\n        return true;\n    }\n\n    return false;\n}\n\nAwsSum.prototype.send = function(operation, args, opts, callback) {\n    var self = this;\n\n    var argName, spec; // for iterations later in the function\n\n    // console.log(operation, args, opts, callback);\n\n    // extend the args with the defaults for this operation (e.g. Action, Target)\n    if ( operation.defaults ) {\n        for (var key in operation.defaults) {\n            if ( typeof operation.defaults[key] === 'function' ) {\n                args[key] = operation.defaults[key].apply(self, [ operation, args ]);\n            }\n            else {\n                // the default, just copy it over (even if undefined)\n                args[key] = operation.defaults[key];\n            }\n        }\n    }\n\n    // check that we have all of the args we expected for this operation\n    for ( argName in operation.args ) {\n        spec = operation.args[argName];\n\n        // see if this is required (and check it exists, even if it is undefined)\n        if ( spec.required && !(argName in args) ) {\n            callback({ Code : 'AwsSumCheck', Message : 'Provide a ' + argName });\n            return;\n        }\n    }\n\n    // ---\n\n    // BUILD ALL OF THE OPTIONS\n\n    // build all of the request options\n    var options = {};\n\n    // ---\n\n    // REQUEST STUFF\n\n    // build the method\n    options.method = self.method();\n    if ( operation.method ) {\n        if ( typeof operation.method === 'string' ) {\n            options.method = operation.method;\n        }\n        else if ( typeof operation.method === 'function' ) {\n            options.method = operation.method.apply(self, [ options, args ]);\n        }\n        else {\n            // since this is a program error, we're gonna throw this one\n            throw 'Unknown operation.method : ' + typeof operation.method;\n        }\n    }\n\n    // ---\n\n    // build the protocol\n    options.protocol = self.protocol();\n    if ( operation.protocol ) {\n        if ( typeof operation.protocol === 'string' ) {\n            options.protocol = operation.protocol;\n        }\n        else if ( typeof operation.protocol === 'function' ) {\n            options.protocol = operation.protocol.apply(self, [ options, args ]);\n        }\n        else {\n            // since this is a program error, we're gonna throw this one\n            throw 'Unknown operation.protocol : ' + typeof operation.protocol;\n        }\n    }\n\n    // ---\n\n    // build the host\n    if (operation.redirectHost) {\n      options.host = operation.redirectHost;\n    } else {\n      options.host = self.host(args);\n      if ( operation.host ) {\n          if ( typeof operation.host === 'function' ) {\n              options.host = operation.host.apply(self, [ options, args ]);\n          }\n          else if ( typeof operation.host === 'string' ) {\n              options.host = operation.host;\n          }\n          else {\n              // since this is a program error, we're gonna throw this one\n              throw 'Unknown operation.host : ' + typeof operation.host;\n          }\n      }\n    }\n\n    // ---\n\n    // build the path\n    options.path = self.path();\n    if ( operation.path ) {\n        if ( typeof operation.path === 'function' ) {\n            options.path = operation.path.apply(self, [ options, args ]);\n        }\n        else if ( typeof operation.path === 'string' ) {\n            options.path = operation.path;\n        }\n        else {\n            // since this is a program error, we're gonna throw this one\n            throw 'Unknown operation.path : ' + typeof operation.path;\n        }\n    }\n\n    // ---\n\n    // build all of the params and headers, and copy the body if user-supplied\n    options.params = [];\n    options.headers = {};\n    options.forms = [];\n    options.json = {};\n    for ( argName in operation.args ) {\n        spec = operation.args[argName];\n        var name = spec.name || argName;\n\n        // if this is a param type, add it there\n        if ( spec.type === 'param' ) {\n            addParamIfDefined( options.params, name, args[argName] );\n        }\n        else if ( spec.type === 'resource' ) {\n            // for Amazon S3 .. things like /?acl, /?policy and /?logging\n            addParam( options.params, name, undefined );\n        }\n        else if ( spec.type === 'param-array' ) {\n            addParamArray( options.params, name, args[argName], spec.prefix );\n        }\n        else if ( spec.type === 'param-array-set' ) {\n            addParamArraySet( options.params, spec.setName, name, args[argName] );\n        }\n        else if ( spec.type === 'param-2d-array' ) {\n            addParam2dArray( options.params, spec.setName, name, args[argName] );\n        }\n        else if ( spec.type === 'param-2d-array-set' ) {\n            addParam2dArraySet( options.params, spec.setName, spec.subsetName, name, args[argName] );\n        }\n        else if ( spec.type === 'param-array-of-objects' ) {\n            addParamArrayOfObjects( options.params, spec.setName || name, args[argName] );\n        }\n        else if ( spec.type === 'param-data' ) {\n            addParamData( options.params, spec.setName || name, args[argName], spec.prefix );\n        }\n        else if ( spec.type === 'param-json' ) {\n            addParamJson( options.params, spec.setName || name, args[argName] );\n        }\n        else if ( spec.type === 'header' ) {\n            setHeaderIfDefined( options.headers, name, args[argName] );\n        }\n        else if ( spec.type === 'header-base64' ) {\n            if ( ! _.isUndefined(args[argName]) ) {\n                setHeader( options.headers, name, (new Buffer(args[argName])).toString('base64') );\n            }\n        }\n        else if ( spec.type === 'form' ) {\n            addFormIfDefined( options.forms, name, args[argName] );\n        }\n        else if ( spec.type === 'form-array' ) {\n            addParamArray( options.forms, name, args[argName], spec.prefix );\n        }\n        else if ( spec.type === 'form-data' ) {\n            addParamData( options.forms, spec.setName || name, args[argName], spec.prefix );\n        }\n        else if ( spec.type === 'form-base64' ) {\n            if ( ! _.isUndefined(args[argName]) ) {\n                addParam( options.forms, name, (new Buffer(args[argName])).toString('base64') );\n            }\n        }\n        else if ( spec.type === 'json' ) {\n            addJsonIfDefined( options.json, name, args[argName] );\n        }\n        else if ( spec.type === 'body' ) {\n            // there should be just one of these\n            options.body = args[argName];\n        }\n        else if ( spec.type === 'special' ) {\n            // this will be dealth with specifically later on - all ok\n        }\n        else {\n            // since this is a program error, we're gonna throw this one\n            throw 'Unknown argument type : ' + spec.type;\n        }\n    }\n\n    // ---\n\n    // if we already have a body, just use it, or build the body from either options.form,\n    // options.json or using operation.body\n    if ( !options.body ) {\n        if ( operation.body ) {\n            if ( typeof operation.body === 'string' ) {\n                options.body = operation.body;\n            }\n            else if ( typeof operation.body === 'function' ) {\n                options.body = operation.body.apply(self, [ options, args ]);\n            }\n            else {\n                // since this is a program error, we're gonna throw this one\n                throw 'Unknown operation.body : ' + typeof operation.body;\n            }\n        } else if ( options.forms && options.forms.length ) {\n            var formParts = [];\n            options.forms.forEach(function(v, i) {\n                formParts[i] = v.name + \"=\" + escape(v.value);\n            });\n            options.body = formParts.join(\"&\");\n            options.headers['content-type'] = 'application/x-www-form-urlencoded';\n        } else {\n            options.body = JSON.stringify(options.json);\n            if ( options.body === '{}' ) {\n                options.body = undefined;\n            }\n        }\n    }\n\n    // ---\n\n    // add anything extra into the request\n    var addExtras = operation.addExtras || self.addExtras;\n    if ( ! _.isArray(addExtras) ) {\n        addExtras = [addExtras];\n    }\n    addExtras.forEach( function(extra) {\n        if ( typeof extra === 'function' ) {\n            extra.apply(self, [ options, args ]);\n        }\n        else {\n            // since this is a program error, we're gonna throw this one\n            throw 'Unknown addExtras : ' + typeof extra;\n        }\n    });\n\n    // finally, add the common operations\n    self.addCommonOptions(options, args);\n\n    // ---\n\n    // RESPONSE STUFF\n\n    // get the status code we expect, either a number on the operation or the default for this service\n    var statusCode = operation.statusCode || self.statusCode();\n    // if this isn't a number or an object, it's an error\n    if ( ! _.isNumber(statusCode) && ! _.isObject(statusCode) ) {\n        // since this is a program error, we're gonna throw this one\n        throw 'Unknown statusCode : ' + typeof statusCode;\n    }\n\n    // build which headers to extract\n    var extractHeaders = operation.extractHeaders || self.extractHeaders();\n    if ( typeof extractHeaders === 'string'\n         || Array.isArray(extractHeaders)\n         || _.isObject(extractHeaders)\n         || _.isRegExp(extractHeaders)\n         || _.isFunction(extractHeaders)\n         || extractHeaders === true ) {\n        // all ok\n    }\n    else {\n        // since this is a program error, we're gonna throw this one\n        throw 'Unknown extractHeaders : ' + typeof extractHeaders;\n    }\n\n    // build the extractBody stuff\n    var extractBody = operation.extractBody || self.extractBody();\n    if ( extractBody !== 'xml' &&\n         extractBody !== 'json' &&\n         extractBody !== 'blob' &&\n         extractBody !== 'string' &&\n         extractBody !== 'application/x-www-form-urlencoded' &&\n         extractBody !== 'none' &&\n         !_.isFunction(extractBody) ) {\n        // since this is a program error, we're gonna throw this one\n        throw 'Unknown extractBody : ' + typeof extractBody;\n    }\n\n    // build the extractBodyWhenError\n    var extractBodyWhenError = operation.extractBodyWhenError || self.extractBodyWhenError();\n    if ( ! extractBodyWhenError ) {\n        // if nothing is defined, then default to the same as extractBody\n        extractBodyWhenError = extractBody;\n    }\n    if ( extractBodyWhenError !== 'xml' &&\n         extractBodyWhenError !== 'json' &&\n         extractBodyWhenError !== 'blob' &&\n         extractBodyWhenError !== 'string' &&\n         extractBodyWhenError !== 'application/x-www-form-urlencoded' &&\n         extractBodyWhenError !== 'none' &&\n         !_.isFunction(extractBodyWhenError) ) {\n        // since this is a program error, we're gonna throw this one\n        throw 'Unknown extractBodyWhenError : ' + typeof extractBodyWhenError;\n    }\n\n    // see if the user wants to stream the response body for things like large binary downloads\n    // (eg. Amazon:S3:GetObject)\n    if ( opts.stream ) {\n        options.stream = opts.stream;\n    }\n\n    // and finally ... add our own User-Agent so Amazon et al can help debug problems when they occur\n    setHeader( options.headers, 'User-Agent', userAgent );\n\n    // ---\n\n    if ( debug ) {\n        console.log('-------------------------------------------------------------------------------');\n        console.log('Request:');\n        console.log('- method         : ', options.method);\n        console.log('- protocol       : ', options.protocol);\n        console.log('- host           : ', options.host);\n        console.log('- path           : ', options.path);\n        console.log('- params         : ', options.params);\n        console.log('- headers        : ', options.headers);\n        console.log('- forms          : ', options.forms);\n        console.log('- json           : ', options.json);\n        console.log('- body           : ', options.body);\n        console.log('Request:');\n        console.log('- statusCode     :', statusCode);\n        console.log('- extractHeaders :', extractHeaders);\n        console.log('- extractBody :', extractBody);\n        console.log('-------------------------------------------------------------------------------');\n    }\n\n    // now send the request\n    self.request( options, function(err, res) {\n        // an error with the request is an error full-stop\n        if ( err ) {\n            var requestError = {\n                Code : 'AwsSum-Request',\n                Message : 'Something went wrong during the request',\n                OriginalError : err\n            };\n\n            callback(requestError);\n            // console.log('CALLBACK: failed due to error from request');\n            return;\n        }\n\n        if ( debug ) {\n            console.log('-------------------------------------------------------------------------------');\n            console.log('Response:');\n            console.log('- statusCode :', res.statusCode);\n            console.log('- headers :', res.headers);\n            console.log('- body :', res.body.toString());\n            console.log('-------------------------------------------------------------------------------');\n        }\n\n        if (res.statusCode == '307') {\n          var redirectHost = '';\n          parser.parseString(res.body.toString(), function (err, data) {\n              if ( err ) {\n                  result.Code    = 'AwsSum-ParseXml';\n                  result.Message = 'Something went wrong during the XML parsing';\n                  result.Error   = err;\n                  result.Body    = res.body.toString();\n              }\n              else {\n                  if (data.Error && data.Error.Endpoint) {\n                    redirectHost = data.Error.Endpoint;\n                  }\n              }\n          });\n          if (redirectHost !== '') {\n            operation.redirectHost = redirectHost;\n            self.send(operation, args, opts, callback);\n            return;\n          }\n        }\n        // save the whole result in here\n        var result = {};\n\n        // (1) add the status code first\n        result.StatusCode = res.statusCode;\n\n        // (2) add some headers into the result\n        if ( extractHeaders ) {\n            // this should be removed in favour of a regex option\n            if ( extractHeaders === 'x-amz' ) {\n                result.Headers = {};\n                _.each(res.headers, function(val, hdr) {\n                    if ( hdr.match(/^x-amz-/) ) {\n                        // ToDo: it'd be nice if we convert things like:\n                        // x-amz-request-id             -> RequestId\n                        // x-amz-id-2                   -> Id2\n                        // x-amz-server-side-encryption -> ServerSideEncryption\n                        // x-amz-version-id             -> VersionId\n                        result.Headers[hdr] = val;\n                    }\n                });\n            }\n            else if ( _.isRegExp(extractHeaders) ) {\n                result.Headers = {};\n                _.each(res.headers, function(val, hdr) {\n                    if ( hdr.match(extractHeaders) ) {\n                        result.Headers[hdr] = val;\n                    }\n                });\n            }\n            else if ( Array.isArray(extractHeaders) ) {\n                // just return the headers that are in this list\n                result.Headers = {};\n                extractHeaders.forEach(function(v) {\n                    result.Headers[v] = res.headers[v];\n                });\n            }\n            else if ( _.isObject(extractHeaders) ) {\n                // just return the headers that are in this list\n                result.Headers = {};\n                _.each(extractHeaders, function(v, k) {\n                    result.Headers[k] = res.headers[k];\n                });\n            }\n            else if ( _.isFunction(extractHeaders) ) {\n                // this should return a hash of headers\n                result.Headers = extractHeaders.apply(self, [ res ]);\n            }\n            else if ( extractHeaders === true ) {\n                // extract _all_ headers\n                result.Headers = res.headers;\n            }\n        } // else, don't extract any headers\n\n        // (3) streaming - if the user wants to stream, then we can't decode the body, so we'll just pass\n        // the 'res' back to the user and call it done.\n        if ( options.stream ) {\n            result.Stream = res;\n\n            // if the status code is ok, then the request is fine, else it's an error\n            if ( isStatusCodeOk(statusCode, res.statusCode) ) {\n                return callback(null, result);\n            }\n            else {\n                return callback(result);\n            }\n        }\n\n        // (4) we may extract the body differently depending on the status code\n        //\n        // It seems the following services can do this:\n        //\n        // * Amazon S3\n        // * Amazon DynamoDB\n        // * Amazon SWF\n\n        // see if this is not a valid statusCode\n        if ( ! isStatusCodeOk(statusCode, res.statusCode) ) {\n            extractBody = extractBodyWhenError;\n        }\n\n        // (5) now extract the body\n\n        // create the result and parse various things into it\n        if ( extractBody === 'xml' ) {\n            // decode the returned XML\n            var ok = true;\n            // Note: parseString is synchronous (not async)\n            parser.parseString(res.body.toString(), function (err, data) {\n                if ( err ) {\n                    result.Code    = 'AwsSum-ParseXml';\n                    result.Message = 'Something went wrong during the XML parsing';\n                    result.Error   = err;\n                    result.Body    = res.body.toString();\n                }\n                else {\n                    result.Body = data;\n                }\n            });\n\n            // see if the xml parsing worked\n            if ( !result.Body ) {\n                if ( options.writeStream ) {\n                    options.writeStream.emit('error', result);\n                    return;\n                }\n                callback(result, null);\n                return;\n            }\n        }\n        else if ( extractBody === 'json' ) {\n            // get the JSON (should this be in a try/catch?)\n            result.Body = JSON.parse(res.body.toString());\n        }\n        else if ( extractBody === 'blob' ) {\n            // just return the body\n            result.Body = res.body;\n        }\n        else if ( extractBody === 'application/x-www-form-urlencoded' ) {\n            // decode the body and return it\n            result.Body = decodeWwwFormUrlEncoded(res.body);\n        }\n        else if ( extractBody === 'none' ) {\n            // no body, so just set a blank one\n            result.Body = '';\n        }\n        else if ( extractBody === 'string' ) {\n            // convert the body to a string\n            result.Body = res.body.toString();\n        }\n        else if ( typeof extractBody === 'function' ) {\n            result.Body = extractBody.apply(self, [ res ]);\n        }\n        else {\n            // shouldn't ever be here since extractBody is checked above\n            throw new Error(\"Program Error: Shouldn't ever be here\");\n        }\n\n        // now we're ready to finally call the callback!!! :D\n        if ( ! isStatusCodeOk(statusCode, res.statusCode) ) {\n            // this was an error\n            // console.log('CALLBACK: failed due to incorrect statusCode');\n            if ( options.writeStream ) {\n                options.writeStream.emit('error', result);\n                return;\n            }\n            callback(result, null);\n            return;\n        }\n\n        // everything so far looks fine, callback with the result\n        // console.log('CALLBACK: success');\n        callback(null, result);\n    });\n};\n\n// just takes the standard options and calls back with the result (or error)\n//\n// * options.method\n// * options.host\n// * options.path\n// * options.params\n// * options.headers\n// * options.forms\n// * options.json\n// * options.body\nAwsSum.prototype.request = function(options, callback) {\n    var self = this;\n\n    // check here that we have everything\n\n    // since this can be called on both close and end, just do it once\n    callback = _.once(callback);\n\n    var reqOptions = {\n        method  : options.method,\n        host    : options.host,\n        path    : options.path,\n        headers : options.headers\n    };\n\n    // if we have a port, then put that onto the request (can make local testing easier with a local server)\n    if ( options.port ) {\n        reqOptions.port = options.port;\n    }\n\n    // if we have any params, put them onto the path\n    if ( options.params && options.params.length ) {\n        reqOptions.path += '?' + stringifyQuery( options.params );\n    }\n\n    // if we have any JSON fields, stick it in the body\n    if ( options.json && options.json.length ) {\n        options.body = JSON.stringify(options.json);\n    }\n\n    // if the user has explicitly set for no agent\n    if ( self.agent() === false ) {\n        reqOptions.agent = false;\n    }\n    else if ( self.agent() !== undefined ) {\n        // else, they have specifically set one\n        reqOptions.agent = self.agent();\n    }\n    else {\n        // no agent, use the default one\n    }\n\n    if ( debug ) {\n        console.log('awssum.js:request(): reqOptions = ', reqOptions);\n        console.log('awssum.js:request(): body       = ', options.body);\n    }\n\n    // do the request\n    var requestFn = options.protocol === 'https' ? https.request : http.request;\n    var req = requestFn( reqOptions, function(res) {\n        // if we want to stream, just callback now\n        if ( options.stream ) {\n            // call back now\n            return callback(null, res);\n        }\n\n        // EVERYTHING from here on is because the user isn't streaming, we're doing our standard decode (as applicable)\n\n        // save all of these buffers, but only if there is no writeStream\n        var buffers = [];\n        var length = 0;\n\n        res.on('data', function(chunk) {\n            // store the buffer and sum the lengths\n            buffers.push(chunk);\n            length += chunk.length;\n        });\n\n        // if the connection terminates before end is emitted, it's an error\n        res.on('close', function(err) {\n            callback(err, null);\n        });\n\n        // when we get our full response back, it's all good!\n        res.on('end', function() {\n            // process the complete body into res.body\n            res.body = new Buffer(length);\n            var offset = 0;\n            buffers.forEach(function(v, i) {\n                v.copy(res.body, offset);\n                offset += v.length;\n            });\n            callback(null, res);\n        });\n    });\n\n    // ---\n    // catch things like \"Error: getaddrinfo ENOENT\"\n    req.on('error', function(e) {\n        if ( debug ) {\n            console.log('awssum.js:request(): request error = ', e);\n        }\n        callback(e);\n    });\n\n    // ---\n\n    // finally, if there is no body, just end the request\n    if ( _.isUndefined(options.body) ) {\n        req.end();\n        return;\n    }\n\n    // if it's a string, send it and end it\n    if ( typeof options.body === 'string' || options.body instanceof Buffer) {\n        req.write(options.body);\n        req.end();\n        return;\n    }\n\n    // it must be a stream, but check it anyway\n    if( typeof options.body.pipe === \"function\" && options.body.readable ) {\n        // if the body is a readableStream, pipe it. (pipe automatically ends the request)\n        options.body.pipe(req);\n        options.body.on('error', function(err) {\n            callback(err, null);\n            req.end(); // todo: determine if this is necessary\n        });\n        return;\n    }\n\n    // if we're still here, it's presumably an empty body so just end the request as if ok!\n    req.end();\n    return;\n};\n\n// --------------------------------------------------------------------------------------------------------------------\n// exports\n\n// utilities for AwsSum plugins to use when \nexports.load                   = load;\nexports.esc                    = esc;\nexports.addParam               = addParam;\nexports.addParamIfDefined      = addParamIfDefined;\nexports.addParamArray          = addParamArray;\nexports.addParamArraySet       = addParamArraySet;\nexports.addParam2dArray        = addParam2dArray;\nexports.addParam2dArraySet     = addParam2dArraySet;\nexports.addParamArrayOfObjects = addParamArrayOfObjects;\nexports.addParamData           = addParamData;\nexports.setHeader              = setHeader;\nexports.setHeaderIfDefined     = setHeaderIfDefined;\nexports.stringifyQuery         = stringifyQuery;\n\n// these are\nexports.makeOperation          = makeOperation;\n\n// ... and export AwsSum so other modules can inherit from it\nexports.AwsSum                 = AwsSum;\n\n// --------------------------------------------------------------------------------------------------------------------\n","/home/travis/build/npmtest/node-npmtest-awssum/node_modules/awssum/lib/esc.js":"// set up the hex digits and a hexMap[0..255] = ( '00', '01', ...,  'FF' )\n\n/*jshint bitwise:false*/\n\nvar hexDigits = '0123456789ABCDEF';\nvar hexMap = [];\nfor ( var i = 0; i < 256; i++ ) {\n    hexMap[i] = hexDigits.charAt(i >> 4) + hexDigits.charAt(i & 15);\n}\nvar doNotEsc = /[A-Za-z0-9_.~\\-%]/;\n\n// Our own version of URI escape/encode, from http://oauth.net/core/1.0a/#encoding_parameters\n\n// # NOTE #\n//\n// From: http://docs.amazonwebservices.com/general/latest/gr/sigv4-create-canonical-request.html\n//\n// * Do not URL-encode any of the unreserved characters that RFC 3986 defines: A-Z, a-z, 0-9,\n//   hyphen ( - ), underscore ( _ ), period ( . ), and tilde ( ~ ).\n// * Percent-encode all other characters with %XY, where X and Y are hexadecimal characters (0-9 and uppercase A-F).\n// * Percent-encode extended UTF-8 characters in the form %XY%ZA....\n// * Percent-encode the space character as %20 (and not '+', as some encoding schemes do).\n//\n// So what we do is a two pronged approach. Firstly, we use encodeURIComponent(str). This converts most characters into\n// their %xx equivalents. This IMPORTANTLY includes any unicode characters. It also means that the string returned now\n// only contains ASCII characters.\n//\n// However, at this point characters like '!' are not yet encoded and from the list above from Amazon, we see that they\n// do need to be encoded. So we then loop though the rest of the chars looking for these and encode them manually.\n//\n// Finaly note -> when doing this, we also skip over '%' since that shouldn't be double encoded.\n\nfunction esc(str) {\n    // firstly, use encodeURIComponent(str) to convert all the unicode and most other characters\n    str = encodeURIComponent(str);\n\n    // force a string (since some things might just be a number, e.g. 2)\n    str = '' + str;\n\n    // loop through all chars in str\n    var result = [];\n    for ( var i = 0; i < str.length; i++ ) {\n        if ( str[i].match( doNotEsc ) ) {\n            result.push( str[i] );\n        }\n        else {\n            result.push( '%' + hexMap[str.charCodeAt(i)] );\n        }\n    }\n\n    // console.log('        ->', result.join(''));\n\n    return result.join('');\n}\n\nmodule.exports = esc;\n"}